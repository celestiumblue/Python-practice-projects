

import datetime, random


def getBirthdays(number):
    birthdays = []
    for i in range(number):
        startOfYear = datetime.date(2001, 1, 1)

        randomNumberOfDays = datetime.timedelta(random.randint(0, 364))
        birthday = startOfYear + randomNumberOfDays
        birthdays.append(birthday)
    return birthdays

def getMatches(birthdays):
    if len(birthdays) == len(set(birthdays)):
        return None
    for a, birthdayA in enumerate(birthdays):
        for b, birthdayB in enumerate(birthdays[a +1 :]):
            if birthdayA == birthdayB:
                return birthdayA


# Intro
print(f'Birthday Paradox simulation, which indicates that in a group of'+
      ' N people, \nthere will be a surprisingly large number of matches')

MONTHS = ('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec')

while True:
        print('How many birthdays should be generated? (up to a 100)')
        response = input('> ')
        if response.isdecimal() and (0 < int(response) <= 100):
            numBDays = int(response)
            break
print()

print('Here are ', numBDays, ' birthdays')
birthdays = getBirthdays(numBDays)
for i,birthday in enumerate(birthdays):
    if i != 0:
        print(', ', end ='')
    monthName =  MONTHS[birthday.month - 1]
    dateText = '{} {}'.format(monthName, birthday.day)
    print(dateText, end='')
print()
print()


match = getMatches(birthdays)


if match != None:
    monthName = MONTHS[match.month - 1]
    dateText = '{} {}'.format(monthName, match.day)
    print('multiple people have a birthday on', dateText)
else:
    print('there are no matching birthdays')

print()


print('Generating', numBDays, 'random birthdays 100,000 times...')
input('Press Enter to begin...')

simMatch = 0
for i in range(100000):
    if i % 10000 == 0:
        print(i, 'simulations run...')
    birthdays = getBirthdays(numBDays)
    if getMatches(birthdays) != None:
        simMatch = simMatch + 1
print('100 000 simulations run')


probability = round(simMatch / 100000 * 100, 2)
print('Out of 100 000 simulations of', numBDays, ' people\nthere was a matching pair of birthdays ' ,simMatch,' times.')
print('This means that', numBDays, 'people have a', probability, '% chance of having a matching birthday in that group')
print("That's a lot more than one would probably think")
